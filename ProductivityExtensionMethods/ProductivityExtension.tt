//~~~~~~~~~~~~~~~~~~~~~~~Productivity Extension Methods D8B1B561-500C-4086-91AA-0714457205DA~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~https://github.com/maziarrezaei/ProductivityExtensionMethods ~~~~~~~~~~~~~-----
//~~~~~~~~~~~~~~~~~~Extension Methods License: Unlicensed (http://Unlicensed.org)~~~~~~~~~~~~~~~~~~
<#//~~~~~~~~~~~~~~~~~~This T4 Templace is licensed under GPL-3.0-or-later~~~~~~~~~~~~~~~~~~~~~~~~~~#>

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".methods.tt" #>
\<#@ template debug="false" hostspecific="true" language="C#" \#>
\<#@ assembly name="System.Core" \#>
\<#@ assembly name="EnvDte" \#>
\<#@ assembly name="System.Xml" \#>
\<#@ assembly name="System.Xml.Linq" \#>
\<#@ import namespace="System.IO" \#>
\<#@ import namespace="System.Linq" \#>
\<#@ import namespace="System.Xml.Linq" \#>
\<#@ import namespace="System.Text" \#>
\<#@ import namespace="System.Text.RegularExpressions" \#>
\<#@ import namespace="System.Collections.Generic" \#>
\<#@ import namespace="Microsoft.VisualStudio.TextTemplating" \#>
\<#@ output extension=".cs" \#>
\<#
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Modify next section in order to ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~To include the extension methods in the generated code.~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<#
 string namespacePlaceholder = "// 0714457205DA";
 string extensionMethodsSourceCode = GetSourceCode(Path.GetDirectoryName(Host.TemplateFile),namespacePlaceholder);

 if(string.IsNullOrWhiteSpace(extensionMethodsSourceCode))
	throw new Exception("Cannot read the source code for extension, or preprocess it.");

 extensionMethodsSourceCode = PreprocessCode(extensionMethodsSourceCode);

 extensionMethodsSourceCode = MakeNullableSyntaxConditional(extensionMethodsSourceCode);

 extensionMethodsSourceCode = InsertNamespaceConditions(extensionMethodsSourceCode,namespacePlaceholder);

 Regex regionFinderRegex=new Regex(@"(?=( |\t)*#region\s+(?<RegionName>[^\r\n]+))(?:(?<ltparen>(?(content)(?(ltparen)( |\t)*#region\s+[^\r\n]*\r\n|)|( |\t)*#region\s+[^\r\n]*\r\n))|(?<content-ltparen>( |\t)*#endregion(\r\n(?=\r\n))?)|(?(ltparen)(?(( |\t)*#region\s+[^\r\n]*\r\n|( |\t)*#endregion(\r\n(?=\r\n))?)|.+?)|))+",  RegexOptions.IgnoreCase|  RegexOptions.Singleline|  RegexOptions.ExplicitCapture);
 var  regionMatches= regionFinderRegex.Matches(extensionMethodsSourceCode);

 
 foreach(var regionName in regionMatches.Cast<Match>().Select(GetRegionName).Distinct().Where(IsValidVariableName))
 {
#>
bool <#=regionName#> = false;
<#}#>

string ExtensionClassAccessModifier = "public";
string GeneratedCodeNamespace = "";  //"" to put the class in root global:: namespace, "<Default>" to set to project's default namespace. "YourNamespace" for a fixed namespace of your choice. 

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DO NOT MODIFY AFTER THIS SECTION~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~The changes will be overwritten when nuget package is restored~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~Use partial classes to add extra functionality~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//ToolsVersion:VersionPlaceholder{D8B1B561-500C-4086-91AA-0714457205DA}
bool isNullableCompatible= IsNullableCompatible();
\#><#=regionFinderRegex.Replace(extensionMethodsSourceCode, ConvertRegionToIf) #>\<#+
private bool IsNullableCompatible()
{
	EnvDTE.DTE visualStudio = (EnvDTE.DTE)((IServiceProvider)this.Host).GetCOMService(typeof(EnvDTE.DTE));
	var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
	
    string targetFramework= XDocument.Load(project.FullName)
                                    ?.Element("Project")
                                    ?.Elements("PropertyGroup")
                                    ?.Elements("TargetFramework")
                                    ?.FirstOrDefault()?.Value;
    
	if(targetFramework == null)
		return false;

	if(targetFramework.StartsWith("netstandard"))
	   return float.Parse(targetFramework.Substring(11))>=2.1f;

	if(targetFramework.StartsWith("netcoreapp"))
	   return float.Parse(targetFramework.Substring(10))>=3f;

	return false;
}
\#>
<#+
private string GetSourceCode(string projDir,string namespacePlaceholder)
{
	 string preprocessors = GetPreprocessors(Path.Combine(projDir, "_Common.cs"));

            Regex classContentRegx = new Regex(@"(?<usings>(\s*using\s+[^(;]+?;\r?\n)+)|(static\s+partial\s+class\s+ProductivityExtensions\s*\r?\n?(?:(?<ltparen>{)|(?<content-ltparen>})|(?(ltparen)[^{}]*|.*))*)", RegexOptions.ExplicitCapture);
            Regex customRegionRegex = new Regex(@"#region (?<name>[^\n\r]+)", RegexOptions.ExplicitCapture);

            StringBuilder stb = new StringBuilder();

            stb.AppendLine(preprocessors);

            var parts = (from path in Directory.GetFiles(projDir, "*.cs")
                         let fileContent = File.ReadAllText(path)
                         let matches = classContentRegx.Matches(fileContent).Cast<Match>()
                         let fileName = Path.GetFileNameWithoutExtension(path)
                         select new
                         {
                             Usings = matches.FirstOrDefault(it => it.Groups["usings"].Success)
                                                       ?.Groups["usings"].Value,
                             Contents = matches.Where(it => it.Groups["content"].Success)
                                                          .Select(it => it.Groups["content"].Value)
                                                          .ToArray(),
                             FileName = fileName,
                             RegionName = fileName.StartsWith("_") ? customRegionRegex.Match(fileContent).Groups["name"].Value : fileName
                         }).ToArray();

            stb.AppendLine(GetUsings(parts.Select(it => it.Usings)))
               .AppendLine(@"
#nullable enable
").Append(namespacePlaceholder).AppendLine(@"

[GeneratedCode(""ProductivityExtensionMethods"", ""VersionPlaceholder{D8B1B561-500C-4086-91AA-0714457205DA}"")]
\<#=ExtensionClassAccessModifier\#> static partial class ProductivityExtensions
{");

            foreach (var part in parts)
            {
                stb.Append("#region ")
                   .AppendLine(part.RegionName)
                   .Append(string.Join(Environment.NewLine,part.Contents))
                   .AppendLine()
                   .AppendLine("#endregion");
            }

            stb.Append("}");
            return stb.ToString();
}

private string InsertNamespaceConditions(string code,string namespacePlaceholder)
{
    string conditionalNamespace = @"\<#
    
    string nmspc = GeneratedCodeNamespace;

    if(nmspc == ""<Default>"")
       nmspc = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(""NamespaceHint"").ToString();

    if(nmspc != """")
       Write(""namespace ""+nmspc+"" \r\n{""); 
    \#>";
    return code.Replace(namespacePlaceholder,conditionalNamespace) + "\<#=GeneratedCodeNamespace!=\"\"? \"\\r\\n}\" :\"\"\#>";
}

private string GetUsings(IEnumerable<string> usings)
{
    Regex regEx = new Regex(@"using\s+(?<name>[^;]+);", RegexOptions.ExplicitCapture);

    return string.Join(Environment.NewLine, (from it in usings
                                             from match in regEx.Matches(it).Cast<Match>()
                                             select match.Groups["name"].Value)
                                                          .Append("System.CodeDom.Compiler")
                                                          .Distinct()
                                                          .OrderBy(it=>it)
                                                          .Select(it => $"using {it};"));
}

private string GetPreprocessors(string filePath)
{
    string fileContent = File.ReadAllText(filePath);
    return Regex.Match(fileContent, @"^(\s|\n*)((?<=(^|\n)\s*)#[^\n]+\n\s*)+", RegexOptions.Multiline | RegexOptions.ExplicitCapture).Value;
}
private string PreprocessCode(string code)
{
    string executablePath = null;
	
	foreach(var it in new[]{"Release","Debug"})
	{
		try
		{
		  executablePath = this.Host.ResolvePath(@$"..\CodePreprocessor\bin\{it}\netcoreapp3.0\CodePreprocessor.exe");
		  if(File.Exists(executablePath))
				break;
		}
		catch
		{}
	}
			
    if(executablePath == null)
		throw new ApplicationException("Cannot find the preprocessor executable. Make sure that the preprocessor project is built.");

	try
	{
    ProcessStartInfo psi = new ProcessStartInfo(executablePath);

    psi.CreateNoWindow = true;
    psi.RedirectStandardOutput = true;
    psi.RedirectStandardInput = true;
    psi.UseShellExecute = false;
	psi.WorkingDirectory = System.IO.Directory.GetCurrentDirectory();
	
    Process p = Process.Start(psi);

    p.StandardInput.Write(code);
    p.StandardInput.Close();

    string s = p.StandardOutput.ReadToEnd();

    p.WaitForExit();

    if (p.ExitCode != 0)
        return null;

    return s;
	}
	catch
	{
	 throw new Exception(executablePath);
	}
}

private string MakeNullableSyntaxConditional(string code)
{
	Regex nullableRegex = new Regex(@"/\*Start:nullableref\*/(?<NullableSyntax>.+?)/\*End:nullableref\*/",RegexOptions.Singleline|  RegexOptions.ExplicitCapture);

	return nullableRegex.Replace(code, mtch => @"\<#if (isNullableCompatible){\#>" + mtch.Groups["NullableSyntax"].Value + @"\<#}\#>");
}
private string GetRegionName(Match match)
{
	return match.Groups["RegionName"].Value.Replace(" ","").Trim();
}
private string ConvertRegionToIf(Match match)
{
    return @$"\<#if ({GetRegionName(match)}){{\#>{match.Groups["content"].Value}\<#}}\#>";
}
private bool IsValidVariableName(string name)
{
	return Regex.IsMatch(name,"^[a-zA-Z_$][a-zA-Z_$0-9]*$");
}
#>